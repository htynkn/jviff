import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'cobertura'
apply plugin: 'com.github.kt3k.coveralls'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1'
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
        classpath "net.sf.proguard:proguard-gradle:5.2.1"
    }
}

repositories {
    jcenter()
}

version = '0.0.2-SNAPSHOT'
group = 'com.huangyunkun'

ext {
    seleniumVersion = '2.45.0'
    guavaVersion = '18.0'
    jacksonVersion = '2.5.2'
    slf4jVersion = '1.7.12'
    cliVersion = '1.2'
    junitVersion = '4.11'
    hamcrestVersion = '1.3'
    javacvVersion = '0.11'
    reflectionVersion = '0.9.9'
}

dependencies {
    compile(
            "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion",
            "com.google.guava:guava:$guavaVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "commons-cli:commons-cli:$cliVersion"
    )
    compile("org.seleniumhq.selenium:selenium-java:$seleniumVersion") {
        exclude group: 'org.eclipse.jetty'
    }
    testCompile(
            "junit:junit:4.11",
            "org.hamcrest:hamcrest-library:1.3",
            'org.mockito:mockito-core:1.10.19',
            'org.eclipse.jetty:jetty-server:9.2.10.v20150310',
            'org.powermock:powermock-module-junit4:1.6.2',
            'org.powermock:powermock-api-mockito:1.6.2'
    )
}

test {
    exclude '**/e2e/**Test.*'
}

task e2e(type: Test) {
    include '**/e2e/**'
}

def configDir = new File(buildscript.sourceFile.parentFile, 'config')
def checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    toolVersion = '6.5'
    configProperties.checkstyleConfigDir = checkstyleConfigDir
}

task uberjar(type: Jar, dependsOn: jar) {
    classifier = 'uber'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude('META-INF/maven/**')

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'com.huangyunkun.jviff.Runner',
                'Package': "com.huangyunkun.jviff",
                'Implementation-Title': "${project.name}",
                'Implementation-Version': "${version}",
                'Implementation-Vendor': 'Yunkun Huang',
                'Built-By': 'Yunkun Huang',
                'Built-Date': new Date().getDateTimeString(),
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
    }
}

cobertura.coverageFormats = ['html', 'xml']

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description 'A test tool to find visual differences between web pages in different environments.'
                url 'https://github.com/htynkn/jviff'

                scm {
                    url 'scm:git@github.com:htynkn/jviff.git'
                    connection 'scm:git@github.com:htynkn/jviff.git'
                    developerConnection 'git@github.com:htynkn/jviff.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'htynkn'
                        name 'Yunkun Huang'
                        email 'htynkn@gmail.com'
                    }
                }
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jar {
    manifest {
        attributes 'Main-Class': 'com.huangyunkun.jviff.Runner',
                'Package': "com.huangyunkun.jviff",
                'Implementation-Title': "${project.name}",
                'Implementation-Version': "${version}",
                'Implementation-Vendor': 'Yunkun Huang',
                'Built-By': 'Yunkun Huang',
                'Built-Date': new Date().getDateTimeString(),
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
    }
}

task proguard(type: proguard.gradle.ProGuardTask, dependsOn: uberjar) {
    injars uberjar.archivePath
    outjars uberjar.archivePath.toString().replace(uberjar.classifier, 'standalone')
    libraryjars javaRtLib()
    libraryjars jsseLib()
    configuration file("$rootDir/proguard.pro")
}

task proguardCheck(type: Test, dependsOn: proguard) {
    testLogging { exceptionFormat "full" }
    classpath = classpath - files(sourceSets.main.output.classesDir) - files(configurations.runtime) +
            files(proguard.outputs.files.singleFile)
}
uploadArchives.dependsOn proguardCheck

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    archives proguard.outputs.files.singleFile
}

def javaRtLib() {
    javaLibPath("/lib/rt.jar", "/../Classes/classes.jar")
}

def jsseLib() {
    javaLibPath("/lib/jsse.jar", "/../Classes/jsse.jar")
}

def javaLibPath(lib, osxLib) {
    def javaBase = System.properties["java.home"];
    def target = lib
    if (OperatingSystem.current().isMacOsX()) {
        if (!new File(javaBase + target).exists()) {
            target = osxLib
        }
    }
    javaBase + target
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
    options.compilerArgs << "-Xlint:deprecation"
}