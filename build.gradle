apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.0'
    }
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

repositories {
    jcenter()
}

version = '0.0.1-SNAPSHOT'
group = 'com.huangyunkun.jviff'

ext {
    seleniumVersion = '2.45.0'
    guavaVersion = '18.0'
    jacksonVersion = '2.5.2'
    slf4jVersion = '1.7.12'
    cliVersion = '1.2'
    junitVersion = '4.11'
    hamcrestVersion = '1.3'
    javacvVersion = '0.11'
    reflectionVersion = '0.9.9'
    limits = [
            'instruction': 80,
            'branch'     : 80,
            'line'       : 80,
            'complexity' : 80,
            'method'     : 80,
            'class'      : 80
    ]
}

dependencies {
    compile(
            "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion",
            "com.google.guava:guava:$guavaVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.reflections:reflections:$reflectionVersion",
            "commons-cli:commons-cli:$cliVersion"
    )
    compile("org.seleniumhq.selenium:selenium-java:$seleniumVersion") {
        exclude group: 'org.eclipse.jetty'
    }
    testCompile(
            "junit:junit:4.11",
            "org.hamcrest:hamcrest-library:1.3",
            'org.mockito:mockito-core:1.10.19',
            'org.eclipse.jetty:jetty-server:9.2.10.v20150310'
    )
}

test {
    exclude '**/e2e/**Test.*'
}

task e2e(type: Test) {
    include '**/e2e/**'
}

def configDir = new File(buildscript.sourceFile.parentFile, 'config')
def checkstyleConfigDir = "$configDir/checkstyle"

checkstyle {
    toolVersion = '6.5'
    configProperties.checkstyleConfigDir = checkstyleConfigDir
}

jacoco {
    toolVersion = "0.7.4.201502262128"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task uberjar(type: Jar, dependsOn: jar) {
    classifier = 'uber'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    exclude('META-INF/maven/**')

    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes 'Main-Class': 'com.huangyunkun.jviff.Runner',
                'Package': "com.huangyunkun.jviff",
                'Implementation-Title': "${project.name}",
                'Implementation-Version': "${version}",
                'Implementation-Vendor': 'Yunkun Huang',
                'Built-By': 'Yunkun Huang',
                'Built-Date': new Date().getDateTimeString(),
                'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
                'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
    }
}

check.dependsOn jacocoTestReport

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (Exception ex) {

}
bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publications = ['mavenJava']

    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = project.name
        websiteUrl = 'https://github.com/htynkn/jviff'
        issueTrackerUrl = 'https://github.com/bintray/bintray-examples/issues'
        vcsUrl = 'https://github.com/htynkn/jviff.git'
        licenses = ['Apache-2.0']
        labels = ['visual', 'selenium']
        publicDownloadNumbers = true
        version {
            name = project.version
        }
    }
}
